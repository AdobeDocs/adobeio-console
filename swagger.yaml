swagger: '2.0'
info:
  title: Transporter API
  version: '1.0'
  description: This is the API layer for Adobe I/O Console.
tags:
  - name: Projects
    description: APIs for I/O Console Projects
  - name: Workspaces
    description: APIs for I/O Console Workspaces
  - name: AppRegistry
    description: APIs for Exchange AppRegistry
  - name: Organizations
    description: APIs for Organizations
  - name: AtlasPolicyEngine
    description: APIs for Atlas Policy Engine
paths:
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/download':
    get:
      summary: Download workspace json
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Download workspace json file
          schema:
            type: object
            properties:
              project:
                type: object
                description: Root element
                properties:
                  id:
                    type: string
                    description: Project id
                  name:
                    type: string
                    description: Project name
                  title:
                    type: string
                    description: Project title
                  description:
                    type: string
                    description: Project description
                  org:
                    type: object
                    description: Organization info
                    properties:
                      id:
                        type: string
                        description: Organization id
                      name:
                        type: string
                        description: Organization name
                      ims_org_id:
                        type: string
                        description: Ims organization id
                      workspace:
                        type: object
                        description: Workspace info
                        properties:
                          id:
                            type: string
                            description: Workspace id
                          name:
                            type: string
                            description: Workspace name
                          title:
                            type: string
                            description: Workspace title
                          description:
                            type: string
                            description: Workspace description
                          details:
                            type: object
                            description: Workspace details
                            properties:
                              credentials:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    id:
                                      type: string
                                      description: Credential id
                                    name:
                                      type: string
                                      description: Credential name
                                    integration_type:
                                      type: string
                                      description: >-
                                        Credential type, possible values
                                        (service, oauthweb, oauthandroid,
                                        oauthios)
                                    jwt:
                                      type: object
                                      description: jwt credential details
                                      properties:
                                        client_id:
                                          type: string
                                          description: Client id
                                        client_secret:
                                          type: string
                                          description: Client secret
                                        techacct:
                                          type: string
                                          description: Technical account id
                                        meta_scopes:
                                          type: array
                                          items:
                                            type: string
                                            description: Credential meta scope
                                    oauth2:
                                      type: object
                                      description: oauth2 credential details
                                      properties:
                                        client_id:
                                          type: string
                                          description: Client id
                                        client_secret:
                                          type: string
                                          description: Client secret
                                        redirect_uri:
                                          type: array
                                          description: Redirect urls list
                                          items:
                                            type: string
                                            description: Redirect url
                              services:
                                type: array
                                description: Workspace services
                                items:
                                  type: object
                                  description: Service details
                                  properties:
                                    code:
                                      type: string
                                      description: Service code
                                    name:
                                      type: string
                                      description: Service name
                              runtime:
                                type: object
                                description: Workspace runtime
                                properties:
                                  namespaces:
                                    type: array
                                    description: Runtime namespaces
                                    items:
                                      type: object
                                      description: Runtime details
                                      properties:
                                        name:
                                          type: string
                                          description: Namespace name
                                        auth:
                                          type: string
                                          description: Namespace auth token
        '500':
          description: Export workspace error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/apps/{appName}/validate':
    get:
      summary: Validate application name
      tags:
        - AppRegistry
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/appName'
        - $ref: '#/parameters/appType'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Returns a boolean value representing whether or not the application name is valid.
          schema: 
            type: boolean
            example: true
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate',
              qs: {appType: 'SOME_STRING_VALUE'},
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate');

            $request->setMethod(HTTP_METH_GET);


            $request->setQueryData(array(
              'appType' => 'SOME_STRING_VALUE'
            ));


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/apps/{appId}':
    get:
      summary: get Application by Id
      tags:
        - AppRegistry
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/appId'
        - $ref: '#/parameters/appType'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
                type: object
                properties:
                  appId:
                    type: string
                    description: application id
                  appType:
                    type: string
                    description: application type - use JGR for Jaeger apps
                  created:
                    type: object
                    description: activity log for application created
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: created timestamp
                  description:
                    type: string
                    description: application description
                  icon:
                    type: string
                    description: URL for the icon
                  images:
                    type: object
                    properties:
                      featuredImage1:
                        type: string
                      featuredImage2:
                        type: string
                      featuredImage3:
                        type: string
                      featuredImage4:
                        type: string
                      featuredImage5:
                        type: string
                  lastModified:
                    type: object
                    description: activity log for application last modified
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: last modified timestamp
                  name:
                    type: string
                    description: application name
                  reviewed:
                    type: object
                    description: activity log for application reviewed
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: reviewed timestamp
                      notes:
                        type: string
                        description: reviewer notes
                  status:
                    type: string
                    description: application status
                  submitted:
                    type: object
                    description: activity log for application submitted
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: submitted timestamp
                      notes:
                        type: string
                        description: submitter notes
                  support:
                    type: object
                    description: support information for the application
                    properties:
                      email:
                        type: string
                      contact:
                        type: string
                      website:
                        type: string
                  title:
                    type: string
                  workspaces:
                    type: array
                    description: list of workspaces in the application
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: workspace id
                        name:
                          type: string
                          description: workspace name
                        endPoint:
                          type: string
                        deepLink:
                          type: string
                        shellProps:
                          type: string
                        releaseNotes:
                          type: string
                        whitelist:
                          type: object
                          description: list of whitelisted users & orgs
                          properties:
                            users:
                              type: array
                              items:
                                type: object
                                properties:
                                  guid:
                                    type: string
                            orgs:
                              type: array
                              items:
                                type: object
                                properties:
                                  orgId:
                                    type: string
                                  orgName:
                                    type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
    patch:
      summary: update Application
      tags:
        - AppRegistry
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/appId'
        - $ref: '#/parameters/authorization'
        - name: body
          in: body
          required: true
          description: Application
          schema:
              type: object
              properties:
                appId:
                  type: string
                  description: application id
                appType:
                  type: string
                  description: application type - use JGR for Jaeger apps
                created:
                  type: object
                  description: activity log for application created
                  properties:
                      guid:
                        type: string
                        description: user guid
                      'on':
                        type: string
                        description: created timestamp
                description:
                  type: string
                  description: application description
                icon:
                  type: string
                  description: url for the icon
                images:
                  type: object
                  properties:
                    featuredImage1:
                      type: string
                    featuredImage2:
                      type: string
                    featuredImage3:
                      type: string
                    featuredImage4:
                      type: string
                    featuredImage5:
                      type: string
                lastModified:
                  type: object
                  description: activity log for application last modified
                  properties:
                    by:
                      type: object
                      properties:
                        guid:
                          type: string
                          description: user guid
                    'on':
                      type: string
                      description: last modified timestamp
                name:
                  type: string
                  description: application name
                reviewed:
                  type: object
                  description: activity log for application reviewed
                  properties:
                    by:
                      type: object
                      properties:
                        guid:
                          type: string
                          description: user guid
                    'on':
                      type: string
                      description: reviewed timestamp
                    notes:
                      type: string
                      description: reviewer notes
                status:
                  type: string
                  description: application status
                submitted:
                  type: object
                  description: activity log for application submitted
                  properties:
                    by:
                      type: object
                      properties:
                        guid:
                          type: string
                          description: user guid
                    'on':
                      type: string
                      description: submitted timestamp
                    notes:
                      type: string
                      description: submitter notes
                support:
                  type: object
                  description: support information for the application
                  properties:
                    email:
                      type: string
                    contact:
                      type: string
                    website:
                      type: string
                title:
                  type: string
                workspaces:
                  type: array
                  description: list of workspaces in the application
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: workspace id
                      name:
                        type: string
                        description: workspace name
                      endPoint:
                        type: string
                      deepLink:
                        type: string
                      shellProps:
                        type: string
                      releaseNotes:
                        type: string
                      whitelist:
                        type: object
                        description: list of whitelisted users & orgs
                        properties:
                          users:
                            type: array
                            items:
                              type: object
                              properties:
                                guid:
                                  type: string
                          orgs:
                            type: array
                            items:
                              type: object
                              properties:
                                orgId:
                                  type: string
                                orgName:
                                  type: string
      responses:
        '200':
          description: Application Updated Successfully
          schema:
                type: object
                properties:
                  appId:
                    type: string
                    description: application id
                  appType:
                    type: string
                    description: application type - use JGR for Jaeger apps
                  created:
                    type: object
                    description: activity log for application created
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: created timestamp
                  description:
                    type: string
                    description: application description
                  icon:
                    type: string
                    description: URL for the icon
                  images:
                    type: object
                    properties:
                      featuredImage1:
                        type: string
                      featuredImage2:
                        type: string
                      featuredImage3:
                        type: string
                      featuredImage4:
                        type: string
                      featuredImage5:
                        type: string
                  lastModified:
                    type: object
                    description: activity log for application last modified
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: last modified timestamp
                  name:
                    type: string
                    description: application name
                  reviewed:
                    type: object
                    description: activity log for application reviewed
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: reviewed timestamp
                      notes:
                        type: string
                        description: reviewer notes
                  status:
                    type: string
                    description: application status
                  submitted:
                    type: object
                    description: activity log for application submitted
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: submitted timestamp
                      notes:
                        type: string
                        description: submitter notes
                  support:
                    type: object
                    description: support information for the application
                    properties:
                      email:
                        type: string
                      contact:
                        type: string
                      website:
                        type: string
                  title:
                    type: string
                  workspaces:
                    type: array
                    description: list of workspaces in the application
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: workspace id
                        name:
                          type: string
                          description: workspace name
                        endPoint:
                          type: string
                        deepLink:
                          type: string
                        shellProps:
                          type: string
                        releaseNotes:
                          type: string
                        whitelist:
                          type: object
                          description: list of whitelisted users & orgs
                          properties:
                            users:
                              type: array
                              items:
                                type: object
                                properties:
                                  guid:
                                    type: string
                            orgs:
                              type: array
                              items:
                                type: object
                                properties:
                                  orgId:
                                    type: string
                                  orgName:
                                    type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request PATCH \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'PATCH',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            HttpRequest::methodRegister('PATCH');

            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D');

            $request->setMethod(HttpRequest::HTTP_METH_PATCH);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.patch("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("PATCH",
            "/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D");

            var request = new RestRequest(Method.PATCH);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Patch.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
    delete:
      summary: delete an Application
      tags:
        - AppRegistry
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/appId'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Application Deleted Successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request DELETE \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'DELETE',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D');

            $request->setMethod(HTTP_METH_DELETE);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.delete("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("DELETE",
            "/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/apps/searchName/{appName}':
    get:
      summary: get Application by Name
      tags:
        - AppRegistry
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/appName'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
                type: object
                properties:
                  appId:
                    type: string
                    description: application id
                  appType:
                    type: string
                    description: application type - use JGR for Jaeger apps
                  created:
                    type: object
                    description: activity log for application created
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: created timestamp
                  description:
                    type: string
                    description: application description
                  icon:
                    type: string
                    description: URL for the icon
                  images:
                    type: object
                    properties:
                      featuredImage1:
                        type: string
                      featuredImage2:
                        type: string
                      featuredImage3:
                        type: string
                      featuredImage4:
                        type: string
                      featuredImage5:
                        type: string
                  lastModified:
                    type: object
                    description: activity log for application last modified
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: last modified timestamp
                  name:
                    type: string
                    description: application name
                  reviewed:
                    type: object
                    description: activity log for application reviewed
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: reviewed timestamp
                      notes:
                        type: string
                        description: reviewer notes
                  status:
                    type: string
                    description: application status
                  submitted:
                    type: object
                    description: activity log for application submitted
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: submitted timestamp
                      notes:
                        type: string
                        description: submitter notes
                  support:
                    type: object
                    description: support information for the application
                    properties:
                      email:
                        type: string
                      contact:
                        type: string
                      website:
                        type: string
                  title:
                    type: string
                  workspaces:
                    type: array
                    description: list of workspaces in the application
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: workspace id
                        name:
                          type: string
                          description: workspace name
                        endPoint:
                          type: string
                        deepLink:
                          type: string
                        shellProps:
                          type: string
                        releaseNotes:
                          type: string
                        whitelist:
                          type: object
                          description: list of whitelisted users & orgs
                          properties:
                            users:
                              type: array
                              items:
                                type: object
                                properties:
                                  guid:
                                    type: string
                            orgs:
                              type: array
                              items:
                                type: object
                                properties:
                                  orgId:
                                    type: string
                                  orgName:
                                    type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/apps/{appId}/submit':
    post:
      summary: submit an Application
      tags:
        - AppRegistry
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/appId'
        - $ref: '#/parameters/authorization'
        - name: body
          in: body
          required: true
          description: submitter notes
          schema:
            type: string
      responses:
        '200':
          description: Application Submitted Successfully
          schema:
                type: object
                properties:
                  appId:
                    type: string
                    description: application id
                  appType:
                    type: string
                    description: application type - use JGR for Jaeger apps
                  created:
                    type: object
                    description: activity log for application created
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: created timestamp
                  description:
                    type: string
                    description: application description
                  icon:
                    type: string
                    description: URL for the icon
                  images:
                    type: object
                    properties:
                      featuredImage1:
                        type: string
                      featuredImage2:
                        type: string
                      featuredImage3:
                        type: string
                      featuredImage4:
                        type: string
                      featuredImage5:
                        type: string
                  lastModified:
                    type: object
                    description: activity log for application last modified
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: last modified timestamp
                  name:
                    type: string
                    description: application name
                  reviewed:
                    type: object
                    description: activity log for application reviewed
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: reviewed timestamp
                      notes:
                        type: string
                        description: reviewer notes
                  status:
                    type: string
                    description: application status
                  submitted:
                    type: object
                    description: activity log for application submitted
                    properties:
                      by:
                        type: object
                        properties:
                          guid:
                            type: string
                            description: user guid
                      'on':
                        type: string
                        description: submitted timestamp
                      notes:
                        type: string
                        description: submitter notes
                  support:
                    type: object
                    description: support information for the application
                    properties:
                      email:
                        type: string
                      contact:
                        type: string
                      website:
                        type: string
                  title:
                    type: string
                  workspaces:
                    type: array
                    description: list of workspaces in the application
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: workspace id
                        name:
                          type: string
                          description: workspace name
                        endPoint:
                          type: string
                        deepLink:
                          type: string
                        shellProps:
                          type: string
                        releaseNotes:
                          type: string
                        whitelist:
                          type: object
                          description: list of whitelisted users & orgs
                          properties:
                            users:
                              type: array
                              items:
                                type: object
                                properties:
                                  guid:
                                    type: string
                            orgs:
                              type: array
                              items:
                                type: object
                                properties:
                                  orgId:
                                    type: string
                                  orgName:
                                    type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request POST \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit');

            $request->setMethod(HTTP_METH_POST);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("POST",
            "/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/apps':
    get:
      summary: get all Applications for a user
      tags:
        - AppRegistry
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/appType'
        - name: offset
          description: offset
          in: query
          required: true
          type: integer
        - name: pageSize
          description: pageSize
          in: query
          required: true
          type: integer
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                appId:
                  type: string
                  description: application id
                appType:
                  type: string
                  description: application type - use JGR for Jaeger apps
                created:
                  type: object
                  description: activity log for application created
                  properties:
                    by:
                      type: object
                      properties:
                        guid:
                          type: string
                          description: user guid
                    'on':
                      type: string
                      description: created timestamp
                description:
                  type: string
                  description: application description
                icon:
                  type: string
                  description: URL for the icon
                images:
                  type: object
                  properties:
                    featuredImage1:
                      type: string
                    featuredImage2:
                      type: string
                    featuredImage3:
                      type: string
                    featuredImage4:
                      type: string
                    featuredImage5:
                      type: string
                lastModified:
                  type: object
                  description: activity log for application last modified
                  properties:
                    by:
                      type: object
                      properties:
                        guid:
                          type: string
                          description: user guid
                    'on':
                      type: string
                      description: last modified timestamp
                name:
                  type: string
                  description: application name
                reviewed:
                  type: object
                  description: activity log for application reviewed
                  properties:
                    by:
                      type: object
                      properties:
                        guid:
                          type: string
                          description: user guid
                    'on':
                      type: string
                      description: reviewed timestamp
                    notes:
                      type: string
                      description: reviewer notes
                status:
                  type: string
                  description: application status
                submitted:
                  type: object
                  description: activity log for application submitted
                  properties:
                    by:
                      type: object
                      properties:
                        guid:
                          type: string
                          description: user guid
                    'on':
                      type: string
                      description: submitted timestamp
                    notes:
                      type: string
                      description: submitter notes
                support:
                  type: object
                  description: support information for the application
                  properties:
                    email:
                      type: string
                    contact:
                      type: string
                    website:
                      type: string
                title:
                  type: string
                workspaces:
                  type: array
                  description: list of workspaces in the application
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: workspace id
                      name:
                        type: string
                        description: workspace name
                      endPoint:
                        type: string
                      deepLink:
                        type: string
                      shellProps:
                        type: string
                      releaseNotes:
                        type: string
                      whitelist:
                        type: object
                        description: list of whitelisted users & orgs
                        properties:
                          users:
                            type: array
                            items:
                              type: object
                              properties:
                                guid:
                                  type: string
                          orgs:
                            type: array
                            items:
                              type: object
                              properties:
                                orgId:
                                  type: string
                                orgName:
                                  type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps',
              qs: {
                appType: 'SOME_STRING_VALUE',
                offset: 'SOME_INTEGER_VALUE',
                pageSize: 'SOME_INTEGER_VALUE'
              },
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps');

            $request->setMethod(HTTP_METH_GET);


            $request->setQueryData(array(
              'appType' => 'SOME_STRING_VALUE',
              'offset' => 'SOME_INTEGER_VALUE',
              'pageSize' => 'SOME_INTEGER_VALUE'
            ));


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/apps/{appId}/upload':
    post:
      summary: upload icon for the application
      tags:
        - AppRegistry
      consumes: 
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/appId'
        - $ref: '#/parameters/appType'
        - name: assetType
          description: Asset type - use ICON
          in: query
          required: true
          type: string
          default: ICON
        - $ref: '#/parameters/authorization'
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              file:
                description: icon file
                type: string
                format: binary
            required:
              - file
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request POST \
              --url 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=SOME_STRING_VALUE' \
              --header 'accept: multipart/form-data' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload',
              qs: {appType: 'SOME_STRING_VALUE', assetType: 'SOME_STRING_VALUE'},
              headers: {
                accept: 'multipart/form-data',
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload');

            $request->setMethod(HTTP_METH_POST);


            $request->setQueryData(array(
              'appType' => 'SOME_STRING_VALUE',
              'assetType' => 'SOME_STRING_VALUE'
            ));


            $request->setHeaders(array(
              'accept' => 'multipart/form-data',
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=SOME_STRING_VALUE")
              .header("accept", "multipart/form-data")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'accept': "multipart/form-data",
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("POST",
            "/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=SOME_STRING_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=SOME_STRING_VALUE");

            var request = new RestRequest(Method.POST);

            request.AddHeader("accept", "multipart/form-data");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'multipart/form-data'

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/apps/health':
    get:
      summary: get AppRegistry Health
      tags:
        - AppRegistry
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/health \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/health',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/health');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/health")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/health\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/apps/health",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/health");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/apps/health")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/policy/{intId}':
    get:
      summary: get Application Policy
      tags:
        - AtlasPolicyEngine
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/orgId'
        - name: intId
          description: Integration ID
          in: path
          required: true
          type: string
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
                type: object
                properties:
                  orgCode:
                    type: string
                    description: IMS org id
                  appCode:
                    type: string
                    description: AMS application id
                  appPolicyCode:
                    type: string
                  apiKey:
                    type: string
                  quotaPolicyCode:
                    type: string
                  planCode:
                    type: string
                  status:
                    type: string
                  _links:
                    type: array
                    items:
                      type: object
                      properties:
                        deprecation:
                          type: string
                        href:
                          type: string
                        hreflang:
                          type: string
                        media:
                          type: string
                        rel:
                          type: string
                        templated:
                          type: boolean
                        title:
                          type: string
                        type:
                          type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/policy/{intId}/usage':
    get:
      summary: get Quota Usage
      tags:
        - AtlasPolicyEngine
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/orgId'
        - name: intId
          description: Integration ID
          in: path
          required: true
          type: string
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: OK
          schema:
                type: object
                properties:
                  policyCode:
                    type: string
                  planCode:
                    type: string
                  orgCode:
                    type: string
                  refreshCycle:
                    type: string
                  policyType:
                    type: string
                  status:
                    type: string
                  availableQuantity:
                    type: integer
                  consumedQuantity:
                    type: integer
                  selectors:
                    type: array
                    items:
                      type: object
                      properties:
                        selector:
                          type: string
                        consumedQuantity:
                          type: integer
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations':
    post:
      summary: create an IMS Org
      tags:
        - Organizations
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/authorization'
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              offer_id:
                type: string
              org_id:
                type: string
              locale:
                type: string
          description: build org request
      responses:
        '201':
          description: IMS Org Created Successfully
          schema:
                type: object
                properties:
                  id:
                    type: string
                  code:
                    type: string
                  name:
                    type: string
                  description:
                    type: string
                  type:
                    type: string
                    description: 'ConsumerType enum ["adobeid","entp","internal","direct"]'
                  idAlias:
                    type: string
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        principal:
                          type: string
                        organization:
                          type: string
                        nameRole:
                          type: string
                        target:
                          type: string
                        targetType:
                          type: string
                        targetData:
                          type: string
                          example: 'linkedHashMap<string, string>'
                  role:
                    type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request POST \
              --url http://developer-stage.adobe.io/console/api/organizations \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --data '{"name":"string","offer_id":"string","org_id":"string","locale":"string"}'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://developer-stage.adobe.io/console/api/organizations',
              headers: {'content-type': 'application/json', authorization: 'SOME_STRING_VALUE'},
              body: {name: 'string', offer_id: 'string', org_id: 'string', locale: 'string'},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations');

            $request->setMethod(HTTP_METH_POST);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('{"name":"string","offer_id":"string","org_id":"string","locale":"string"}');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://developer-stage.adobe.io/console/api/organizations")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .body("{\"name\":\"string\",\"offer_id\":\"string\",\"org_id\":\"string\",\"locale\":\"string\"}")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload =
            "{\"name\":\"string\",\"offer_id\":\"string\",\"org_id\":\"string\",\"locale\":\"string\"}"


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE"
                }

            conn.request("POST", "/console/api/organizations", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"string\",\"offer_id\":\"string\",\"org_id\":\"string\",\"locale\":\"string\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request.body =
            "{\"name\":\"string\",\"offer_id\":\"string\",\"org_id\":\"string\",\"locale\":\"string\"}"


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects':
    get:
      summary: List Projects
      tags:
        - Projects
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Found projects
          schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Project id
                    name:
                      type: string
                      description: Project name
                    description:
                      type: string
                      description: Project description
                    type:
                      type: string
                      description: Project type
                    enabled:
                      type: boolean
                      description: Is project enabled
                    deleted:
                      type: boolean
                      description: Is project deleted
                    title:
                      type: string
                      description: Project title
                    org_id:
                      type: string
                      description: Org id
                    date_created:
                      type: string
                      format: date
                      description: Project create date
                    date_last_modified:
                      type: string
                      format: date
                      description: Project last modify date
                    who_created:
                      type: string
                      description: Created by
                    who_last_modified:
                      type: string
                      description: Last modified by
        '500':
          description: Error getting projects
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects", headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
    post:
      summary: Create project
      tags:
        - Projects
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
        - name: body
          in: body
          schema:
            type: object
            required:
              - name
              - title
              - type
            properties:
              name:
                type: string
              title:
                type: string
              who_created:
                type: string
              description:
                type: string
              type:
                type: string
          description: New project info
          required: true
      responses:
        '201':
          description: Create project success
          schema:
            type: object
            properties:
              projectId:
                type: string
                description: Project id
              projectType:
                type: string
                description: Project type
              workspaceId:
                type: string
                description: Workspace id
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-code-samples:
        - lang: shell
          source: |-
            curl --request POST \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE' \
              --data '{"name":"string","title":"string","who_created":"string","description":"string","type":"string"}'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              },
              body: {
                name: 'string',
                title: 'string',
                who_created: 'string',
                description: 'string',
                type: 'string'
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects');

            $request->setMethod(HTTP_METH_POST);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('{"name":"string","title":"string","who_created":"string","description":"string","type":"string"}');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .body("{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload =
            "{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}"


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("POST",
            "/console/api/organizations/%7BorgId%7D/projects", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'

            request.body =
            "{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}"


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}/workspaces':
    get:
      summary: List Workspaces
      tags:
        - Projects
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Workspaces for project
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: Workspace id
                name:
                  type: string
                  description: Workspace name
                title:
                  type: string
                  description: Workspace title
                description:
                  type: string
                  description: Workspace description
                quota_usage:
                  type: string
                  description: Quota usage for workspace
                enabled:
                  type: boolean
                  description: Is project enabled
                runtime_enabled:
                  type: boolean
                  description: Is runtime enabled
                date_created:
                  type: string
                  format: date
                  description: Workspace create date
                date_last_modified:
                  type: string
                  format: date
                  description: Workspace last modify date
                who_created:
                  type: string
                  description: Created by
                who_last_modified:
                  type: string
                  description: Last modified by
        '500':
          description: Error returning workspaces for project
      x-code-samples:
    post:
      summary: Create workspace
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
        - name: body
          in: body
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              title:
                type: string
              description:
                type: string
          description: New workspace info
          required: true
      responses:
        '201':
          description: Create workspace success
          schema:
            type: object
            properties:
              projectId:
                type: string
                description: Project id
              workspaceId:
                type: string
                description: Workspace id
        '500':
          description: Error creating workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request POST \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE' \
              --data '{"name":"string","title":"string","description":"string"}'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              },
              body: {name: 'string', title: 'string', description: 'string'},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces');

            $request->setMethod(HTTP_METH_POST);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('{"name":"string","title":"string","description":"string"}');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .body("{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload =
            "{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}"


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("POST",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'

            request.body =
            "{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}"


            response = http.request(request)

            puts response.read_body
    
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}':
    delete:
      summary: Delete Project
      tags:
        - Projects
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Delete project success
        '500':
          description: Error deleting project
      x-code-samples:
        - lang: shell
          source: |-
            curl --request DELETE \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'DELETE',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');

            $request->setMethod(HTTP_METH_DELETE);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.delete("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("DELETE",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
    patch:
      summary: Edit Project
      tags:
        - Projects
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - title
            properties:
              name:
                type: string
              title:
                type: string
              description:
                type: string
          description: New project info
      responses:
        '200':
          description: Edit project success
        '500':
          description: Error editing project
      x-code-samples:
        - lang: shell
          source: |-
            curl --request PATCH \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE' \
              --data '{"name":"string","title":"string","description":"string"}'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'PATCH',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              },
              body: {name: 'string', title: 'string', description: 'string'},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            HttpRequest::methodRegister('PATCH');

            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');

            $request->setMethod(HttpRequest::HTTP_METH_PATCH);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('{"name":"string","title":"string","description":"string"}');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.patch("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .body("{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload =
            "{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}"


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("PATCH",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D");

            var request = new RestRequest(Method.PATCH);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Patch.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'

            request.body =
            "{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}"


            response = http.request(request)

            puts response.read_body
    get:
      summary: Get project by ID
      tags:
        - Projects
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Found project
          schema:
            type: object
            properties:
              id:
                type: string
                description: Project id
              name:
                type: string
                description: Project name
              description:
                type: string
                description: Project description
              type:
                type: string
                description: Project type
              enabled:
                type: boolean
                description: Is project enabled
              deleted:
                type: boolean
                description: Is project deleted
              title:
                type: string
                description: Project title
              org_id:
                type: string
                description: Org id
              date_created:
                type: string
                format: date
                description: Project create date
              date_last_modified:
                type: string
                format: date
                description: Project last modify date
              who_created:
                type: string
                description: Created by
              who_last_modified:
                type: string
                description: Last modified by
        '500':
          description: Error getting project
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}':
    patch:
      summary: Edit Workspace
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              title:
                type: string
              whoLastModified:
                type: string
              description:
                type: string
          description: New workspace info
      responses:
        '200':
          description: Edit workspace success
        '500':
          description: Error editing workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request PATCH \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE' \
              --data '{"name":"string","title":"string","whoLastModified":"string","description":"string"}'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'PATCH',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              },
              body: {
                name: 'string',
                title: 'string',
                whoLastModified: 'string',
                description: 'string'
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            HttpRequest::methodRegister('PATCH');

            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');

            $request->setMethod(HttpRequest::HTTP_METH_PATCH);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('{"name":"string","title":"string","whoLastModified":"string","description":"string"}');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.patch("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .body("{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload =
            "{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}"


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("PATCH",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D");

            var request = new RestRequest(Method.PATCH);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Patch.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'

            request.body =
            "{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}"


            response = http.request(request)

            puts response.read_body
    get:
      summary: Get Workspace
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Found workspace
          schema:
            type: object
            properties:
              id:
                type: string
                description: Workspace id
              name:
                type: string
                description: Workspace name
              title:
                type: string
                description: Workspace title
              description:
                type: string
                description: Workspace description
              quota_usage:
                type: string
                description: Quota usage for workspace
              enabled:
                type: boolean
                description: Is project enabled
              runtime_enabled:
                type: boolean
                description: Is runtime enabled
              date_created:
                type: string
                format: date
                description: Workspace create date
              date_last_modified:
                type: string
                format: date
                description: Workspace last modify date
              who_created:
                type: string
                description: Created by
              who_last_modified:
                type: string
                description: Last modified by
        '500':
          description: Error getting workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
    delete:
      summary: Delete a workspace
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Delete workspace success
        '500':
          description: Error deleting workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request DELETE \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'DELETE',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');

            $request->setMethod(HTTP_METH_DELETE);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.delete("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("DELETE",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/plugins':
    get:
      summary: Get plugins for workspace
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Return list of plugins
          schema:
            type: array
            items:
              type: object
              properties:
                id_workspace:
                  type: string
                  description: Workspace id
                id_plugin:
                  type: string
                  description: Plugin id
        '500':
          description: Error getting plugins for workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials':
    get:
      summary: Get Credentials
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Return list of credentials
          schema:
            type: array
            items:
              type: object
              properties:
                id_workspace:
                  type: string
                  description: Workspace id
                id_credential:
                  type: string
                  description: Credential id
                flow_type:
                  type: string
                  description: Flow type
                credential_type:
                  type: string
                  description: Credential type
        '500':
          description: Error getting credentials for workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/entp':
    post:
      summary: Create Enterprise Credential
      tags:
        - Workspaces
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              certificate:
                description: Credential certificate
                type: string
                format: binary
            required:
              - certificate
          x-s2o-overloaded: true
      responses:
        '200':
          description: Return enterprise credential details
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: Credential id
                apiKey:
                  type: string
                  description: Credential API Key
                orgId:
                  type: string
                  description: IMS Org ID
        '500':
          description: Error creating enterprise credential for workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request POST \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp \
              --header 'accept: multipart/form-data' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE' \
              --data '{"name":"string","description":"string"}'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp',
              headers: {
                accept: 'multipart/form-data',
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              },
              body: {name: 'string', description: 'string'},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp');

            $request->setMethod(HTTP_METH_POST);


            $request->setHeaders(array(
              'accept' => 'multipart/form-data',
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('{"name":"string","description":"string"}');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp")
              .header("accept", "multipart/form-data")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .body("{\"name\":\"string\",\"description\":\"string\"}")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload = "{\"name\":\"string\",\"description\":\"string\"}"


            headers = {
                'accept': "multipart/form-data",
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("POST",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp");

            var request = new RestRequest(Method.POST);

            request.AddHeader("accept", "multipart/form-data");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"string\",\"description\":\"string\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'multipart/form-data'

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'

            request.body = "{\"name\":\"string\",\"description\":\"string\"}"


            response = http.request(request)

            puts response.read_body
      x-s2o-warning: >-
        Operation
        post:api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/entp
        has multiple requestBodies
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/analytics':
    post:
      summary: Create Analytics Credential
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Adobeid'
          description: Analytics credential object
          required: true
      responses:
        '200':
          description: Return analytics credential details
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: Credential id
                apiKey:
                  type: string
                  description: Credential API Key
                orgId:
                  type: string
                  description: IMS Org ID
        '500':
          description: Error creating analytics credential for workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request POST \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE' \
              --data '{"name":"string","description":"string","platform":"string","urlScheme":"string","redirectUriList":["string"],"defaultRedirectUri":"string","domain":"string","approvalInfo":{"websiteUrl":"string","companyWebsiteUrl":"string","integrationWebsiteUrl":"string","contactEmail":"string","integrationDescription":"string","descriptionTypekit":"string","descriptionCCStorage":"string","otherCreativeSDK":"string","domain":"string","sdkComponents":["string"],"requestState":"string","requestStateList":[{"rejectReasons":"string","requestState":"string","created":"string","comments":"string"}]}}'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              },
              body: {
                name: 'string',
                description: 'string',
                platform: 'string',
                urlScheme: 'string',
                redirectUriList: ['string'],
                defaultRedirectUri: 'string',
                domain: 'string',
                approvalInfo: {
                  websiteUrl: 'string',
                  companyWebsiteUrl: 'string',
                  integrationWebsiteUrl: 'string',
                  contactEmail: 'string',
                  integrationDescription: 'string',
                  descriptionTypekit: 'string',
                  descriptionCCStorage: 'string',
                  otherCreativeSDK: 'string',
                  domain: 'string',
                  sdkComponents: ['string'],
                  requestState: 'string',
                  requestStateList: [
                    {
                      rejectReasons: 'string',
                      requestState: 'string',
                      created: 'string',
                      comments: 'string'
                    }
                  ]
                }
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics');

            $request->setMethod(HTTP_METH_POST);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('{"name":"string","description":"string","platform":"string","urlScheme":"string","redirectUriList":["string"],"defaultRedirectUri":"string","domain":"string","approvalInfo":{"websiteUrl":"string","companyWebsiteUrl":"string","integrationWebsiteUrl":"string","contactEmail":"string","integrationDescription":"string","descriptionTypekit":"string","descriptionCCStorage":"string","otherCreativeSDK":"string","domain":"string","sdkComponents":["string"],"requestState":"string","requestStateList":[{"rejectReasons":"string","requestState":"string","created":"string","comments":"string"}]}}');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .body("{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload =
            "{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}"


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("POST",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'

            request.body =
            "{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}"


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/adobeId':
    post:
      summary: Create AdobeId Credential
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Adobeid'
          description: AdobeId credential object
          required: true
      responses:
        '200':
          description: Return adobeid credential details
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: Credential id
                apiKey:
                  type: string
                  description: Credential API Key
                orgId:
                  type: string
                  description: IMS Org ID
        '500':
          description: Error creating adobeId credential for workspace
      x-code-samples:
        - lang: shell
          source: |-
            curl --request POST \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE' \
              --data '{"name":"string","description":"string","platform":"string","urlScheme":"string","redirectUriList":["string"],"defaultRedirectUri":"string","domain":"string","approvalInfo":{"websiteUrl":"string","companyWebsiteUrl":"string","integrationWebsiteUrl":"string","contactEmail":"string","integrationDescription":"string","descriptionTypekit":"string","descriptionCCStorage":"string","otherCreativeSDK":"string","domain":"string","sdkComponents":["string"],"requestState":"string","requestStateList":[{"rejectReasons":"string","requestState":"string","created":"string","comments":"string"}]}}'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              },
              body: {
                name: 'string',
                description: 'string',
                platform: 'string',
                urlScheme: 'string',
                redirectUriList: ['string'],
                defaultRedirectUri: 'string',
                domain: 'string',
                approvalInfo: {
                  websiteUrl: 'string',
                  companyWebsiteUrl: 'string',
                  integrationWebsiteUrl: 'string',
                  contactEmail: 'string',
                  integrationDescription: 'string',
                  descriptionTypekit: 'string',
                  descriptionCCStorage: 'string',
                  otherCreativeSDK: 'string',
                  domain: 'string',
                  sdkComponents: ['string'],
                  requestState: 'string',
                  requestStateList: [
                    {
                      rejectReasons: 'string',
                      requestState: 'string',
                      created: 'string',
                      comments: 'string'
                    }
                  ]
                }
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId');

            $request->setMethod(HTTP_METH_POST);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('{"name":"string","description":"string","platform":"string","urlScheme":"string","redirectUriList":["string"],"defaultRedirectUri":"string","domain":"string","approvalInfo":{"websiteUrl":"string","companyWebsiteUrl":"string","integrationWebsiteUrl":"string","contactEmail":"string","integrationDescription":"string","descriptionTypekit":"string","descriptionCCStorage":"string","otherCreativeSDK":"string","domain":"string","sdkComponents":["string"],"requestState":"string","requestStateList":[{"rejectReasons":"string","requestState":"string","created":"string","comments":"string"}]}}');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .body("{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload =
            "{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}"


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("POST",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'

            request.body =
            "{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}"


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/{integrationType}/{credentialId}/services':
    put:
      summary: Subscribe Credential to Services
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - name: integrationType
          description: Integration Type
          in: path
          required: true
          type: string
        - name: credentialId
          description: ID of credential
          in: path
          required: true
          type: string
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
        - name: body
          in: body
          schema:
            $ref: '#/definitions/SubscribeToServices'
          description: SDK codes to add to credential
      responses:
        '200':
          description: List of services credential is subscribed to
          schema:
            type: array
            items:
              type: object
              properties:
                sdkList:
                  type: string
                  description: List of SDK codes associated with credential
        '404':
          description: Credential not found
      x-code-samples:
        - lang: shell
          source: |-
            curl --request PUT \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE' \
              --data '[{"sdkCode":"string","licenseConfigs":[{"productId":"string","id":"string","op":"string"}],"roles":[{"id":0,"code":"string","name":"string"}]}]'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'PUT',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              },
              body: [
                {
                  sdkCode: 'string',
                  licenseConfigs: [{productId: 'string', id: 'string', op: 'string'}],
                  roles: [{id: 0, code: 'string', name: 'string'}]
                }
              ],
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services');

            $request->setMethod(HTTP_METH_PUT);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            $request->setBody('[{"sdkCode":"string","licenseConfigs":[{"productId":"string","id":"string","op":"string"}],"roles":[{"id":0,"code":"string","name":"string"}]}]');


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.put("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .body("[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services\"\n\n\tpayload := strings.NewReader(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}],\\\"roles\\\":[{\\\"id\\\":0,\\\"code\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            payload =
            "[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]"


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("PUT",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Put.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'

            request.body =
            "[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}],\"roles\":[{\"id\":0,\"code\":\"string\",\"name\":\"string\"}]}]"


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects_workspaces/credentials/{credentialId}':
    get:
      summary: Get project/workspace IDs for an credentials
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - name: credentialId
          description: Credential ID
          in: path
          required: true
          type: string
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Project/workspace IDs
          schema:
            type: array
            items:
              type: object
              properties:
                projectId:
                  type: string
                  description: Project id
                workspaceId:
                  type: string
                  description: Workspace id
                credentialId:
                  type: string
                  description: Credential id
        '404':
          description: Credential not found / Project not found
        '500':
          description: Error retrieving workspace/project info
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects_workspaces/workspaces/{workspaceId}':
    get:
      summary: Get project ID for a workspace
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/workspaceId'
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Project ID
          schema:
            type: array
            items:
              type: object
              properties:
                projectId:
                  type: string
                  description: Project id
                workspaceId:
                  type: string
                  description: Workspace id
        '404':
          description: Project not found
        '500':
          description: Error retrieving project info
      x-code-samples:
        - lang: shell
          source: |-
            curl --request GET \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'GET',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D');

            $request->setMethod(HTTP_METH_GET);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.get("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("GET",
            "/console/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
  '/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/{credentialId}':
    delete:
      summary: Delete Credential
      tags:
        - Workspaces
      parameters:
        - $ref: '#/parameters/orgId'
        - $ref: '#/parameters/projectId'
        - $ref: '#/parameters/workspaceId'
        - name: credentialId
          description: ID of credential
          in: path
          required: true
          type: string
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/x-api-key'
      responses:
        '200':
          description: Delete credentials success
        '500':
          description: Error deleting credentials
      x-code-samples:
        - lang: shell
          source: |-
            curl --request DELETE \
              --url http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'x-api-key: SOME_STRING_VALUE'
        - lang: node
          source: |
            var request = require("request");

            var options = {
              method: 'DELETE',
              url: 'http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D',
              headers: {
                'content-type': 'application/json',
                authorization: 'SOME_STRING_VALUE',
                'x-api-key': 'SOME_STRING_VALUE'
              }
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: php
          source: >-
            <?php


            $request = new HttpRequest();

            $request->setUrl('http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D');

            $request->setMethod(HTTP_METH_DELETE);


            $request->setHeaders(array(
              'content-type' => 'application/json',
              'authorization' => 'SOME_STRING_VALUE',
              'x-api-key' => 'SOME_STRING_VALUE'
            ));


            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: java
          source: >-
            HttpResponse<String> response =
            Unirest.delete("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D")
              .header("content-type", "application/json")
              .header("authorization", "SOME_STRING_VALUE")
              .header("x-api-key", "SOME_STRING_VALUE")
              .asString();
        - lang: go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: python
          source: >-
            import http.client


            conn = http.client.HTTPConnection("developer-stage.adobe.io")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'x-api-key': "SOME_STRING_VALUE"
                }

            conn.request("DELETE",
            "/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: csharp
          source: >-
            var client = new
            RestClient("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("x-api-key", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("http://developer-stage.adobe.io/console/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["x-api-key"] = 'SOME_STRING_VALUE'


            response = http.request(request)

            puts response.read_body
parameters:
  orgId:
    name: orgId
    description: Org ID
    in: path
    required: true
    type: string
  projectId:
    name: projectId
    description: Project ID
    in: path
    required: true
    type: string
  workspaceId:  
    name: workspaceId
    description: Workspace ID
    in: path
    required: true
    type: string
  appName:  
    name: appName
    description: Application name to be validated
    in: path
    required: true
    type: string
  appId:
    name: appId
    description: Application id
    in: path
    required: true
    type: string
  appType:
    name: appType
    description: Application type - use JGR
    in: query
    required: true
    type: string  
  authorization:
    name: Authorization
    description: Access token
    in: header
    required: true
    type: string
  x-api-key:  
    name: x-api-key
    description: API key
    in: header
    required: true
    type: string
definitions:
  SubscribeToServices:
    type: array
    items:
      type: object
      properties:
        sdkCode:
          type: string
        licenseConfigs:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              id:
                type: string
              op:
                type: string
  Adobeid:
    type: object
    required:
      - name
      - description
      - platform
    properties:
      name:
        type: string
      description:
        type: string
      platform:
        type: string
      urlScheme:
        type: string
      redirectUriList:
        type: array
        items:
          type: string
      defaultRedirectUri:
        type: string
      domain:
        type: string
      approvalInfo:
        type: object
        properties:
          websiteUrl:
            type: string
          companyWebsiteUrl:
            type: string
          integrationWebsiteUrl:
            type: string
          contactEmail:
            type: string
          integrationDescription:
            type: string
          descriptionTypekit:
            type: string
          descriptionCCStorage:
            type: string
          otherCreativeSDK:
            type: string
          domain:
            type: string
          sdkComponents:
            type: array
            items:
              type: string
          requestState:
            type: string
          requestStateList:
            type: array
            items:
              type: object
              properties:
                rejectReasons:
                  type: string
                requestState:
                  type: string
                created:
                  type: string
                comments:
                  type: string
  Entp:
    type: object
    required:
      - name
      - description
    properties:
      name:
        type: string
      description:
        type: string
  roles:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
